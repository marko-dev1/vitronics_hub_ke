const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user');
require('dotenv').config();

    const register = async (req, res) => {
    try {
        const { name, email, phone, password, address } = req.body;
        
        // Check if user exists
        const existingUser = await User.findByEmail(email);
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }
        
        // Hash password
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // Create user
        const userId = await User.create({
            name,
            email,
            phone,
            password: hashedPassword,
            address
        });
        
        // âœ… Set session
        req.session.email = email;
        req.session.user = {
            id: userId,
            name,
            email,
            phone,
            address
        };
        
        
        res.status(201).json({ message: 'User registered successfully', userId });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
    };

    const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        
        // Check if user exists
        const user = await User.findByEmail(email);
        if (!user) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
        
        // Check password
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
        
        // Create JWT token
        const token = jwt.sign(
            { userId: user.id },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );
        
        // res.json({ 
        //     token,
        //     user: {
        //         id: user.id,
        //         name: user.name,
        //         email: user.email,
        //         phone: user.phone,
        //         address: user.address,
                
        //     }
        // });

          req.session.email = user.email;
        req.session.user = {
            id: user.id,
            name: user.name,
            email: user.email,
            phone: user.phone,
            address: user.address,
        };
        
        res.json({ 
            message: 'Login successful',
            token,
            user: req.session.user
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
};

const logout = (req, res) => {
  req.session.destroy(err => {
    if (err) return res.status(500).json({ message: 'Logout failed' });
    res.clearCookie('connect.sid');
    res.json({ message: 'Logged out successfully' });
  });
};




module.exports = { register, login, logout };


// module.exports = { register, login };
